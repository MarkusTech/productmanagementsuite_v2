generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userID       Int      @id @default(autoincrement())
  firstName    String
  middleName   String
  lastName     String
  roleID       Int
  username     String   @unique
  email        String   @unique
  password     String
  phoneNumber  String
  address      String
  birthday     String
  status       Boolean  @default(true)
  image_url    String?
  createdByID  Int
  modifiedByID Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Categories {
  categoryID   Int      @id @default(autoincrement())
  categoryCode String   @unique
  categoryName String
  description  String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  items        Items[]  @relation("CategoryItems") // Relation to Items
}

model Locations {
  locationID   Int      @id @default(autoincrement())
  locationName String
  description  String?
  status       Boolean  @default(true)
  createdByID  Int
  modifiedByID Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  inventory    Inventory[] @relation("InventoryLocations") // Added inverse relation
}

model Suppliers {
  supplierID   Int      @id @default(autoincrement())
  supplierName String
  description  String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Items {
  itemID       Int      @id @default(autoincrement())
  itemCode     String   @unique
  categoryID   Int
  barcode      String
  itemName     String
  description  String?
  grams        Float
  uom          String
  price        Float
  cost         Float
  image_url    String?
  createdByID  Int
  modifiedByID Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       Boolean  @default(true)

  category     Categories @relation("CategoryItems", fields: [categoryID], references: [categoryID]) // Establish relationship
  inventory    Inventory[] @relation("InventoryItems") // Added inverse relation
}

model Inventory {
  inventoryID        Int                  @id @default(autoincrement())
  locationID        Int
  itemID            Int
  quantity          Int
  inventoryTypeID   Int
  reOrderThreshold   String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  item              Items                 @relation("InventoryItems", fields: [itemID], references: [itemID])
  location          Locations             @relation("InventoryLocations", fields: [locationID], references: [locationID])
  inventoryType     InventoryType         @relation("InventoryTypeInventories", fields: [inventoryTypeID], references: [inventoryTypeID]) // Added inverse relation

  adjustments       InventoryAdjustment[] @relation("InventoryAdjustments") // One-to-many relation
}

model InventoryType {
  inventoryTypeID Int      @id @default(autoincrement())
  typeName        String
  description     String?
  status          Boolean  @default(true)
  createdByID     Int
  modifiedByID    Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inventories     Inventory[] @relation("InventoryTypeInventories") // Inverse relation      
}

model InventoryAdjustment {
  adjustmentID       Int                  @id @default(autoincrement())
  inventoryID        Int
  adjustmentTypeID   Int                  // Foreign key relation without relation attribute
  adjustmentReasonID Int                  // Foreign key relation without relation attribute
  quantityAdjusted    Int
  status             String
  createdByID        Int
  modifiedByID       Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  inventory         Inventory             @relation("InventoryAdjustments", fields: [inventoryID], references: [inventoryID]) // Foreign key relation
  adjustmentType    AdjustmentType        @relation("AdjustmentTypeAdjustments", fields: [adjustmentTypeID], references: [adjustmentTypeID]) // Foreign key relation
  adjustmentReason  AdjustmentReason      @relation("AdjustmentReasonAdjustments", fields: [adjustmentReasonID], references: [adjustmentReasonID]) // Foreign key relation
}

model AdjustmentType {
  adjustmentTypeID Int                  @id @default(autoincrement())
  typeName         String
  description     String?
  createdByID      Int
  modifiedByID     Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  adjustments      InventoryAdjustment[] @relation("AdjustmentTypeAdjustments") // One-to-many relation
}

model AdjustmentReason {
  adjustmentReasonID Int                  @id @default(autoincrement())
  reasonName         String
  description     String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdByID        Int
  modifiedByID       Int?

  adjustments        InventoryAdjustment[] @relation("AdjustmentReasonAdjustments") // One-to-many relation
}

model PurchaseOrder {
  poID                Int      @id @default(autoincrement())
  poNumber            Int      @unique
  supplierID          Int
  orderDate           DateTime
  expectedDeliverDate DateTime
  status              String
  locationID          Int
  createdByID         Int
  modifiedByID        Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model PurchaseOrderItem {
  poItemID  Int      @id @default(autoincrement())
  poID      Int
  itemID    Int
  uom       String
  unitCost  Float
  orderQty  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model poReceivingItem {
  poReceivingItemID Int      @id @default(autoincrement())
  itemID            Int
  uom               String
  receivedQty       Int
  unitCost          Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model poReceiving {
  poReceivingID   Int      @id @default(autoincrement())
  poID            Int
  receivedDate    DateTime
  referenceNumber String
  totalCost       Float
  totalQty        Int
  status          String
  receivedByID    Int
  createdAt       DateTime
  updatedAt       DateTime
}

model poSupplier {
  supplierID     Int      @id @default(autoincrement())
  supplierName   String
  contactDetails String
  address        String
  email          String
  createdByID    Int
  modifiedByID   Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         Boolean  @default(true)
}
